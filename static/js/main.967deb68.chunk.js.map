{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","saveLocalTodos","filterHandler","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.967deb68.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// so props is not necessary to write\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n  // Write JavaScript code/functions/etc\r\n  const inputTextHandler = (e) => {\r\n    // console.log out the event\r\n    // How to add events to button?\r\n    setInputText(e.target.value);\r\n  };\r\n  const submitTodoHandler = (e) => {\r\n    // Stop refreshing the page\r\n    e.preventDefault();\r\n    setTodos([\r\n      // If we have todos, just pass them into here\r\n      // For deployed, Math.random() should be like a UUID package instead\r\n      ...todos, { text: inputText, completed: false, id: Math.random() * 1000 }\r\n    ]);\r\n    // Set state of input back to empty.\r\n    setInputText(\"\");\r\n  };\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  }\r\n    return(\r\n        <form>\r\n          {/* every time our input changes, this function is being run */}\r\n          {/* we need to set the value of our input to keep it/our UI in check */}\r\n        <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <div className=\"select\">\r\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n    // Events\r\n    const deleteHandler = () => {\r\n        // modify state\r\n        // updates UI automatically\r\n        // setTodos function to modify state\r\n        // filter state out to match whatever is clicked on\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n        // console.log(todo);\r\n    }\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(item => {\r\n            //         // if the item clicked is the same as the todo.id\r\n            if (item.id === todo.id) {\r\n                //             // flip property of item since this is Boolean\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            {/* if state of todo.completed is true, add a state, if not, don't */}\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\n// Import Components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n    // no way to go up a level and use ToDoList state in form, so we keep it in App.js\r\n    // State and props can only be passed downward into components, not up\r\n    // console.log(filteredTodos);\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {/* write JavaScript code */}\r\n                {/* for each to do from the state that we have we are going to render out a todo component */}\r\n                {/* each child in a list should have a unique \"key\" prop */}\r\n                {filteredTodos.map(todo => (\r\n                    // Pass down data into state\r\n                    <Todo setTodos={setTodos} todos={todos} key={todo.id} todo={todo} text={todo.text} id={todo.id} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","/* eslint-disable default-case */\n// Watch older videos on props and state\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\n// Importing Components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  // function allows us to change value\n  // I want to change the state's value\n  // This will update the inputText\n  // This is the variable we inject data into\n  // This is where our state is\n  // Pass from ToDoList to Todo\n  // STATE STUFF\n  const [inputText, setInputText] = useState(\"\");\n  // We are going to have an array of objects here;\n  const [todos, setTodos] = useState([]);\n  // default status\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  // RUN ONCE\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  // USE EFFECT\n  // The empty array means that the arrow function runs only once when the component is first rendered\n  useEffect(() => {\n    saveLocalTodos();\n    filterHandler();\n  }, [todos, status])\n\n  // FUNCTIONS\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n  // Save to local storage\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n     let todoLocal =  JSON.parse(localStorage.getItem('todos'));\n     setTodos(todoLocal);\n    }\n  }\n  return (\n    // JavaScript 'class' keyword is reserved\n    <div className=\"App\">\n      <header>\n        <h1>Gulu-Gulu To-Do List </h1>\n      </header>\n      {/* Props / this is the state below */}\n      <Form inputText={inputText} todos={todos} setTodos={setTodos} setInputText={setInputText} setStatus={setStatus} />\n      {/* Pass this down to the ToDo list */}\n      <TodoList  filteredTodos={filteredTodos} setTodos={setTodos} todos={todos} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}